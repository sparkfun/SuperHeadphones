{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Home","text":"<p>This is just a placeholder file for the webpage re-direct. All the content for this section is actually in the <code>introduction.md</code> file.</p>"},{"location":"arduino_code/","title":"Arduino Code","text":"<p>Now that we have our libraries installed, we can compile and upload the Arduino code to the ESP32 Thing Plus.</p>"},{"location":"arduino_code/#serial-upload","title":"Serial Upload","text":"<p>Below is the Arduino sketch INO for this project. Copy and paste the code below in your Arduino IDE.</p> SuperHeadphones Arduino Sketch Super_Headphones_BT_and_MIC_V2.0.ino <pre><code>/*\nSuper Headphones\nSparkFun Electronics\nPete Lewis\nSeptember 2023\n\nUsing an ESP32 Thing Plus and a WM8960 Audio Codec,\nThis project enables you to create your own wireless headphones (aka BT).\nIt also alows you to mix in a pair of ambient microphones!\nRead the tutorial here:\nhttps://docs.sparkfun.com/SuperHeadphones/\n\nThis code utilized Paul Schatzmann's ESP32-A2DP library to make all the wireless \naudio (BT) functionality happen. Big thank you to Paul Schatzmann and the many others \nwho have contributed to that library!\nDownload here: https://github.com/pschatzmann/ESP32-A2DP\n\n  Do you like this open source code? Help support SparkFun. Buy a board!\n\n    SparkFun Audio Codec Breakout - WM8960 (Qwiic)\n    https://www.sparkfun.com/products/21250\n\n    SparkFun Thing Plus - ESP32 WROOM (USB-C)\n    https://www.sparkfun.com/products/20168\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n*/\n\n#include &lt;Wire.h&gt;\n#include &lt;SparkFun_WM8960_Arduino_Library.h&gt;  // CTRL+Click here to get the library: http://librarymanager/All#SparkFun_WM8960\nWM8960 codec1;\n\n#include \"BluetoothA2DPSink.h\" // To manually install, download here: https://github.com/pschatzmann/ESP32-A2DP\nBluetoothA2DPSink a2dp_sink;\n\n//// Iot Redboard\n//#define I2S_WS 16\n//#define I2S_SD 25\n//#define I2S_SDO 17\n//#define I2S_SCK 14\n\n// ESP32 Thing Plus C\n#define I2S_WS 13\n#define I2S_SD 27\n#define I2S_SDO 14\n#define I2S_SCK 32\n\n// Use I2S Processor 0\n#define I2S_PORT I2S_NUM_0\n\n// Define input buffer length\n#define bufferLen 64\nint16_t sBuffer[bufferLen];\n\nint pgaGain1 = 25;\n\nint pgaGain1_prev = 0;\n\n#define NUM_OF_READINGS 20\nlong userInputA0;\nint userInputArray[NUM_OF_READINGS] = {};  // used to make a rolling average of readings on ADC input\nint arrayPos = 0;\n#define PGA_GAIN_SETTING_MAX 32 // don't really need more than this on the PGA, so let's put a max on it so no one gets too crazy.\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println(\" \");\n\n  Wire.begin();\n  Wire.setClock(100000);\n\n  if (codec1.begin() == false)  //Begin communication over I2C\n  {\n    Serial.println(\"The codec 1 did not respond. Please check wiring.\");\n    while (1)\n      ;  //Freeze\n  }\n  Serial.println(\"Codec1 is connected properly.\");\n\n  codec1_setup();\n\n  // Set up I2S\n  i2s_install();\n  i2s_setpin();\n\n  a2dp_sink.start(\"SuperHeadphones\");\n}\n\nvoid loop() {\n\n  // Read the volumet potentiometer to set the volume of the ambient mics.\n  // Every loop:\n  // - take a reading and put it into the array\n  // - increment position\n  // - loop back position to start of array \n  // - when we reach the end take all readings in array, and create a rolling average.\n\n  userInputArray[arrayPos] = analogRead(A0);\n  arrayPos += 1;\n  if (arrayPos &gt; NUM_OF_READINGS) arrayPos = 0;\n  int total = 0;\n  for (int i = 0; i &lt; NUM_OF_READINGS; i++) total += userInputArray[i];\n  userInputA0 = total / NUM_OF_READINGS;\n  // map it from 0-4096, to a value that is acceptable in the pga gain (0-63)\n  // 0-63, (0 = -17.25dB) &lt;&lt;-- 0.75dB steps --&gt;&gt; (23 = +0dB)...(63 = +30dB)\n  pgaGain1 = map(userInputA0, 0, 4096, PGA_GAIN_SETTING_MAX, 0);\n\n  if (pgaGain1 != pgaGain1_prev) {\n    codec1.setLINVOL(pgaGain1);\n    codec1.setRINVOL(pgaGain1);\n    Serial.print(\"pgaGain1: \");\n    Serial.println(pgaGain1);\n  }\n\n  pgaGain1_prev = pgaGain1;\n  delay(10);\n}\n\n\nvoid codec1_setup() {\n  // General setup needed\n  codec1.enableVREF();\n  codec1.enableVMID();\n\n  //codec1.enableMicBias();\n\n  // WM8960_MIC_BIAS_VOLTAGE_0_9_AVDD (0.9*AVDD) or\n  // WM8960_MIC_BIAS_VOLTAGE_0_65_AVDD (0.65*AVDD)\n  //codec1.setMicBiasVoltage(WM8960_MIC_BIAS_VOLTAGE_0_9_AVDD);\n\n  // setup signal flow to the ADC\n\n  codec1.enableLMIC();\n  codec1.enableRMIC();\n\n  // connect from INPUT1 to \"n\" (aka inverting) inputs of PGAs.\n  codec1.connectLMN1();\n  codec1.connectRMN1();\n\n  // disable mutes on PGA inputs (aka INTPUT1)\n  codec1.disableLINMUTE();\n  codec1.disableRINMUTE();\n\n  // set input boosts to get inputs 1 to the boost mixers\n  codec1.setLMICBOOST(WM8960_MIC_BOOST_GAIN_0DB);  // 0 = 0dB\n  codec1.setRMICBOOST(WM8960_MIC_BOOST_GAIN_0DB);  // 0 = 0dB\n\n  codec1.pgaLeftNonInvSignalSelect(WM8960_PGAL_VMID);   // for single ended input on LIN1\n  codec1.pgaRightNonInvSignalSelect(WM8960_PGAL_VMID);  // for single ended input on RIN1\n\n  //codec1.enablePgaZeroCross();\n\n  codec1.connectLMIC2B();\n  codec1.connectRMIC2B();\n\n  // enable boost mixers\n  codec1.enableAINL();\n  codec1.enableAINR();\n\n  // enable output mixers\n  codec1.enableLOMIX();\n  codec1.enableROMIX();\n\n  // Enable bypass connection from Left INPUT3 to Left output mixer, note, the\n  // default gain on this input (LI2LOVOL) is -15dB\n  codec1.enableLI2LO();\n  codec1.enableRI2RO();\n\n  // Sets volume control between \"left input\" to \"left output mixer\"\n  codec1.setLI2LOVOL(WM8960_OUTPUT_MIXER_GAIN_0DB);\n  codec1.setRI2ROVOL(WM8960_OUTPUT_MIXER_GAIN_0DB);\n\n\n  //  LB2LO (booster to output mixer (analog bypass)\n  codec1.enableLB2LO();\n  codec1.enableRB2RO();\n\n  // connect from DAC outputs to output mixer\n  codec1.enableLD2LO();\n  codec1.enableRD2RO();\n\n  // set gainstage between booster mixer and output mixer\n  // for this loopback example, we are going to keep these as low as they go\n  codec1.setLB2LOVOL(WM8960_OUTPUT_MIXER_GAIN_0DB);  // 0 = -21dB\n  codec1.setRB2ROVOL(WM8960_OUTPUT_MIXER_GAIN_0DB);  // 0 = -21dB\n\n  // CLOCK STUFF, These settings will get you 44.1KHz sample rate, and class-d freq at 705.6kHz\n  codec1.enablePLL();  // needed for class-d amp clock\n  codec1.setPLLPRESCALE(WM8960_PLLPRESCALE_DIV_2);\n  codec1.setSMD(WM8960_PLL_MODE_FRACTIONAL);\n  codec1.setCLKSEL(WM8960_CLKSEL_PLL);\n  codec1.setSYSCLKDIV(WM8960_SYSCLK_DIV_BY_2);\n  codec1.setBCLKDIV(4);\n  codec1.setDCLKDIV(WM8960_DCLKDIV_16);\n  codec1.setPLLN(WM8960_DCLKDIV_16);\n  codec1.setPLLK(0x86, 0xC2, 0x26);  // PLLK=86C226h\n  //codec1.set_ADCDIV(0); // default is 000 (what we need for 44.1KHz), so no need to write this.\n  //codec1.set_DACDIV(0); // default is 000 (what we need for 44.1KHz), so no need to write this.\n  codec1.setWL(WM8960_WL_16BIT);\n\n  codec1.enablePeripheralMode();\n  //codec1.enableMasterMode();\n  //codec1.set_ALRCGPIO(); // note, should not be changed while ADC is enabled.\n\n  // enable ADCs and DACs\n  codec1.enableAdcLeft();\n  codec1.enableAdcRight();\n  codec1.enableDacLeft();\n  codec1.enableDacRight();\n  codec1.disableDacMute();\n\n  //codec1.enableLoopBack(); // Loopback sends ADC data directly into DAC\n  codec1.disableLoopBack();\n  codec1.disableDacMute();  // default is \"soft mute\" on, so we must disable mute to make channels active\n\n  codec1.enableHeadphones();\n  //codec1.enableSpeakers();\n  codec1.enableOUT3MIX();  // provides VMID as buffer for headphone ground\n  //codec1.enableSpeakerZeroCross();\n\n  Serial.println(\"Volume set to +0dB\");\n  //codec1.setSpeakerVolume(120);\n  codec1.setHeadphoneVolumeDB(0.00);\n  //codec1.enable3d();\n\n  Serial.println(\"Codec 1 Setup complete. Listen to left/right INPUT1 on Speaker outputs.\");\n  delay(10);\n\n  codec1.setLINVOL(23);\n  codec1.setRINVOL(23);\n}\n\nvoid i2s_install() {\n  // Set up I2S Processor configuration\n  static i2s_config_t i2s_config = {\n    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_TX),\n    .sample_rate = 44100,  // Updated automatically by A2DP\n    .bits_per_sample = (i2s_bits_per_sample_t)16,\n    .channel_format = I2S_CHANNEL_FMT_RIGHT_LEFT,\n    .communication_format = (i2s_comm_format_t)(I2S_COMM_FORMAT_STAND_I2S),\n    .intr_alloc_flags = 0,  // Default interrupt priority\n    .dma_buf_count = 8,\n    .dma_buf_len = 64,\n    .use_apll = true,\n    .tx_desc_auto_clear = true  // Avoiding noise in case of data unavailability\n  };\n  a2dp_sink.set_i2s_config(i2s_config);\n}\n\nvoid i2s_setpin() {\n  // Set I2S pin configuration\n  i2s_pin_config_t my_pin_config = {\n    .bck_io_num = I2S_SCK,\n    .ws_io_num = I2S_WS,\n    .data_out_num = I2S_SDO,\n    .data_in_num = I2S_PIN_NO_CHANGE\n  };\n  a2dp_sink.set_pin_config(my_pin_config);\n}\n</code></pre> <p>Select your board in the Tools menu (in our case ESP32 Thing Plus) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200. You should see the following message pop up. And then as you turn the volume potentiometer, the setting value will be printed to the terminal.</p> <p>If you see the above messages in your terminal, then you should be ready to try out some listening. Put your headphones on and try adjusting the potentiometer. As you turn the knob (clockwise), this will increase the volume level of the microphones.</p> <p>One way to verify the system is to turn the volume all the way up and gently rub each microphone with your fingertip. You should hear a quiet scratching sound in the corresponding headphone ear speaker.</p> <p>Note, if you hear a lot of buzzing, it is most likely the USB cable. Try unplugging the USB cable, and powering only from the battery. The battery will be a much quieter power source, and so should not add any noise into the audio signal.</p>"},{"location":"arduino_code/#wireless-connection","title":"Wireless connection","text":"<p>In addition to the messages sent to the serial terminal, the provided code sets up the ESP32 Thing Plus to be an audio receiver as a bluetooth A2DP Sink.</p> <p>After powering up your headphones, use your PC or cell phone to find a Bluetooth device named \"SuperHeadphones\".</p> <ul> <li> <p> </p> <p>Connect BT with your PC</p> </li> <li> <p> </p> <p>Connect to BT with your cell phone</p> </li> </ul> <p>Click Connect. Now you can play audio from your PC program or phone app and listen on your superheadphones!</p> <p>Note, the volume control for this sound source is controlled by adjusting the setting on your computer or cell phone. The knob on the headphones is only used to adjust the volume of the ambient microphones.</p>"},{"location":"arduino_code/#diving-deeper","title":"Diving deeper","text":"<p>The provided code for this project is a combination of other Arduino example sketches. Review these for further information on how each section of the code works.</p> <ul> <li> <p>WM8960 Arduino Library Examples:</p> <ul> <li> <p>Example 3: Line Input 1</p> </li> <li> <p>Example 9: I2S Bluetooth</p> </li> <li> <p>Example 10: ADC Gain</p> </li> </ul> </li> <li> <p>ESP32-A2DP Arduino Library Examples:</p> <ul> <li> <p>bt_music_receiver_simple</p> </li> <li> <p>I2S pin definition</p> </li> <li> <p>I2S configuration</p> </li> </ul> </li> </ul>"},{"location":"arduino_library/","title":"Installing Arduino Libraries","text":"<p>Arduino</p>"},{"location":"arduino_library/#arduino-ide","title":"Arduino IDE","text":"<p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE and a library, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul>"},{"location":"arduino_library/#usb-to-serial-drivers","title":"USB-to-Serial Drivers","text":"<p>If you've never connected a CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p>"},{"location":"arduino_library/#wm8960-audio-codec","title":"WM8960 Audio Codec","text":"<p>SparkFun has written a library to work with the SparkFun Audio Codec Breakout - WM8960 (Qwiic). You can obtain this library through the Arduino Library Manager by searching for \"SparkFun Audio Codec Breakout WM8960\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the  GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun WM8960 Arduino Library (ZIP)"},{"location":"arduino_library/#esp32-a2dp","title":"ESP32-A2DP","text":"<p>Paul Schatzmann has written a library to work with I2S audio and wireless audio (BT) using the ESP32 microcontrollers. To manually install the library, get it from the  GitHub Repository or download the .ZIP by clicking the button below:</p> Paul Schatzmann's ESP32-A2DP Arduino Library (ZIP)"},{"location":"hard_copy/","title":"Hard copy","text":"<p>Need to download or print our hookup guide?</p> <ul> <li>Print :fontawesome-solid-print: (Single-Page View)<ul> <li>To save as a <code>*.pdf</code> file, select the Printer or Destination labeled Save as PDF. (Instructions will vary based on the browser)</li> </ul> </li> </ul>"},{"location":"hardware_assembly/","title":"Hardware assembly","text":""},{"location":"hardware_assembly/#qwiic-assembly","title":"Qwiic Assembly","text":""},{"location":"hardware_assembly/#soldered-assembly","title":"Soldered Assembly","text":"<ul> <li> How to Solder: Through-Hole Soldering </li> </ul> New to soldering? <p>If you have never soldered before or need a quick refresher, check out our How to Solder: Through-Hole Soldering guide. <p>      How to Solder: Through-Hole Soldering </p></p>"},{"location":"hardware_assembly/#batterypower-assembly","title":"Battery/Power Assembly","text":""},{"location":"hardware_overview/","title":"Hardware Overview","text":""},{"location":"hardware_overview/#block-diagram","title":"Block Diagram","text":"<p>Here is a high-level block diagram of the sound system inside the headphones. The Audio Codec is central to this design. It handles all of the sound inputs and outputs. The ESP32 Thing Plus is still the \"brain\", and it is necessary  to setup and control the codec with I<sup>2</sup>C. The ESP32 also receives the wireless audio (BT), and then sends that to the codec, digitally, with I2S audio data lines.</p> <p></p> <p>High level block diagram of the headphone system.</p>"},{"location":"hardware_overview/#exploded-view","title":"Exploded View","text":"<p>Here is an exploded view of the headphones. It took a little experimenting and tinkering to eventually disassemble all of the parts. In this section, we will share a few techniques we learned along the way during this hack.</p> <p></p> <p>Exploded view of the headphone system.</p>"},{"location":"hardware_overview/#foam-removal","title":"Foam Removal","text":"<p>Removing the foam was pretty straight forward. You can use a flat head screwdriver or pliers, but be careful. As you can see, I accidentally ripped the foam apart when I pulled a bit too hard.  </p> <p></p> <p>Oops! I accidentally ripped the foam.</p> <p>It's really best to take it slowly and pull it gently, little-by-little. I really got the hang of this by the end of this project. I must have taken mine apart nearly 50 times as I fine tuned the wiring and swapped out microphones during testing. Hopefully, by reading this tutorial, you can keep this dis-assembly and reassembly cycle to a minimum. :)</p>"},{"location":"hardware_overview/#screws","title":"Screws","text":"<p>After you remove the foam, this will expose the screws that hold the outer and inner parts of each can together.</p> <p></p> <p>Two small screws hold the cans together.</p> <p>The screws are located back behind the black plastic. Because of the angle, they can be a little difficult to access, but with a small Phillips head screwdriver and the right amount of pressure, it can be done.</p>"},{"location":"hardware_overview/#knob-and-pcb-removal","title":"Knob and PCB removal","text":"<p>When the inner screws are removed, the cans come apart, and then you will see the original electronics (blue). The volume knob is simply pressure fitted onto the potentiometer shaft, so you can pull that directly off. Unscrew the potentiometer mounting nut and the four mounting screws, and you will then be able to remove the original electronics.</p> <p></p> <p>Knob, nut, and 4 mounting screws removed.</p>"},{"location":"hardware_overview/#custom-pcb-assembly","title":"Custom PCB Assembly","text":"<p>Note, the custom PCB is not 100% necessary to complete this project. My early prototype \"V2\" was a hand-wired version. If you decide to go that route, then referencing the custom PCB Schematic PDF would be a good guide.</p> <p>If you do decided to order the custom PCB (or a version of your own), the \"mother board\" PCB will need some assembly too:</p> <ul> <li> <p>Use headers to solder in the Audio Codec and ESP32 Thing Plus.</p> </li> <li> <p>Solder into place the PTH right-angled potentiometer/switch.</p> </li> <li> <p>Solder into place the SMD 3.5mm TRS audio input connector.</p> </li> </ul> <ul> <li> <p> <p>Early Prototype V2</p> <li> <p> <p>Bare Custom PCB</p> <li> <p> <p>Assembled Custom PCB</p> Click images for a closer view."},{"location":"hardware_overview/#wiring-diagram","title":"Wiring Diagram","text":"<p>Once everything is opened up, and you have your custom PCB assembled, you can begin wiring up the remaining necessary connections: microphones, speakers, and battery.</p> <p>Before you dive into soldering things up, here are three important things to remember:</p> <ul> <li> <p>Use 26 gauge wire for most of the connections, as it can get fairly tight in there. I used an old Ethernet cable which had 8 conductors. If you open those up, the resulting hookup wire is quite nice to work with, and has great coloring to keep things straight.</p> </li> <li> <p>The left microphone signal and its ground connection must use a shielded cable. If you wire it up with bare hook-up wire, then you will be prone to picking up strange sounds like distant radio stations and creeping whining noises with varying frequencies. Kind of fun, but not ideal for every listening experience.</p> </li> <li> <p>The microphones we ultimately chose require a specific power and signal circuit (see below).</p> </li> </ul> <p>Here is a wiring diagram to show all the connections in one place:</p> <p></p> <p>Wiring Diagram. Lots to hook up!</p>"},{"location":"hardware_overview/#microphone-circuit","title":"Microphone Circuit","text":"<p>Here is the required circuit from the datasheet of the PUI Audio AOM-5035L.</p> <p></p> <p>AOM-5035L Microphone Signal &amp; Power Circuit</p> <p>Note, the capacitor is already included on the WM8960 input, and so we only need to wire up the pull-down resistor of 5.6K on the signal. Put this pull-down resistor as close to the microphone as possible. The left microphone is the only one that is more susceptible to picking up noise, and so we found that having the pull-down in that ear-can (and using a shielded mic cable) eliminated any unwanted noise.</p> <p>As a side note, the proximity of the pull-down resistor to the microphone also had an effect on the acoustic overload point (AOP). Strangely, if the resistor was placed too far away, then the mics begin clipping at lower sound source volumes. During my early testing, I would hear clipping in my left ear when I really played hard on the hi-hats (which are probably the loudest and closest drum instrument to that microphone). But as soon as I moved the pull-down closer to the mic, the clipping went away!</p> <p>Here is some close up shots of where I ended up hacking in the final position of each pull-down resistor. Note, I didn't have the exact 5.6K\u03a9 resistors required, so for the left ear, I used two 2.2K\u03a9s in series. And for the right, I used a 4.7K\u03a9.</p> <ul> <li> <p> </p> <p>Left mic pull-down resistor</p> </li> <li> <p> </p> <p>Right mic pull-down resistor</p> </li> </ul>"},{"location":"introduction/","title":"Introduction","text":"<p>This tutorial will guide you through how to build your own wireless and/or wired headphones with ambient microphones. We start with some off-the-shelf headphones intended for use while lawn mowing, and then hack in some new electronics to allow wireless (BT), auxiliary 3.5mm TRS input, and stereo ambient microphones. The original purpose of this project was to make it easy and safe to play loud music with a rock band in the basement, however, the inclusion of the natural sounds around you into your listening experience can be useful in many other situations.</p> <ul> <li> <p> <p>Headphones with Ambient Mics</p> <li> <p> <p>Project Demo Video</p>"},{"location":"introduction/#background","title":"Background","text":"<p>The first prototype design was sparked up around the time I was designing the Qwiic Speaker Amp in August of 2022. Now, over a year later, it has been through three major versions:</p> <ul> <li> <p> <p>August 2022 - \"V1\" Qwiic Speaker Amp</p> <li> <p> <p>November 2022 - \"V2\" WM8960 Codecs</p> <li> <p> <p>February 2023 - \"V3\" Custom PCB</p> <p>With this project, I was trying to solve three problems:</p> <ol> <li> <p>) I want to be able to lower all barriers to practicing music. The less things I have to set up, the better!</p> </li> <li> <p>) When I play drums, I need to protect my ears from getting damaged from exposure to extremely loud sounds. To do this, I usually wear in-ear monitors (IEMs). IEMs are kind of like headphones, but they are more like earbuds. They are usually custom-molded to your ear canal. In this way, they are actually working much like ear plugs and blocking out loud sounds while still providing sound to your ears. In order to get a great monitor mix, I then need to set up mics and a sound mixer. You can accomplish this with headphones too, but most do not provide a safe amount of sound-isolation. IEMs are great, but they are also very expensive. They can range from $300 to $3,000.</p> </li> <li> <p>) My eight year old son is playing loud music more and more (acoustic drums, amplified guitar and keyboards), and I want him to be able to protect his hearing while still being able to rock out and hear the music clearly. Over-the-ear hearing protection (aka \u201cEar Muffs\u201d), do a great job of protecting your hearing, but they also dampen the sound way too much. In addition to missing out on many of the mid and high frequencies, it can be very difficult to hear your own instrument and even your band mates.</p> </li> </ol> <p>My idea of a perfect solution:</p> <ul> <li> <p>Over-the-ear headphones that have stereo ambient mics to mix in!</p> </li> <li> <p>Very easy to \u201cpop on\u201d, with no cables attached. Nothing to wire up, just pop them on and go.</p> </li> <li> <p>Mix in a desired level of the ambient mics using a single knob, essentially a \u201cmore ears\u201d knob - right there on my headphones, at the ready to adjust as needed.</p> </li> <li> <p>Battery powered, 100% self contained, wireless. During some jam sessions with the kiddos, we will quickly trade instruments. We need to be able to jump around the room, free from wires and/or plugging and unplugging things.</p> </li> <li> <p>The ability to mix in a line level audio source (for practice tracks or other monitor signals from a mixer). This could come in handy for more advanced monitor sound system setups, where maybe I am getting a feed from the mixer that contains the rest of the musicians I am playing with.</p> </li> <li> <p>And icing on the cake, a Bluetooth\u00ae optional input. This last thing was really more useful for me during my solo practice sessions. I can load my phone up with my practice tracks and wirelessly connect to my headphones. Also, of course, useful for general listening.</p> </li> </ul>"},{"location":"introduction/#headphones","title":"Headphones","text":"<p>For this project, we chose over-the-ear headphones that provide a large amount of sound dampening (30dB). These types of headphones are also called ear-muffs and are often marketed for use during loud construction work or lawn mowing.</p> <p>The exact headphones we chose to start with were the following:</p> Smoostart Am/Fm Radio Hearing Protector, Noise Reduction Safety Ear Muffs, 30dB Noise Canceling Ear Protection <p>When using this type of lawn-mowing headphones without any modification, they provide adequate sound dampening to protect your ears in extremely loud places. However, with this benefit, you also lose the ability to hear your natural surroundings clearly. Usually, it is described as sounding a bit like two pillows are held to either ear. This is because the passive sound dampening is blocking most of the high frequencies.</p> <p>In order to get the sound clarity back, we need to use ambient microphones. The correct type of microphone can accept the loud sound sources without distortion. This type of microphone is said to have a high acoustic overload point, or AOP. We can send that clean audio signal from the microphones into the headphones at a safe listening level. In addition to a high AOP, the microphones also need to have a large signal to noise ratio (SNR), which helps avoid having too much \"hiss\" in the audio signal. Choosing the best microphone for the job turned out to involve a lot of testing. More on this later.</p>"},{"location":"introduction/#the-modification","title":"The Modification","text":"<p>In addition to sound dampening, the original electronics included the ability to listen to FM radio and plug in a 3.5mm TRS audio cable. In this tutorial, we will remove the stock electronics, and replace them with the SparkFun ESP32 Thing Plus and the WM8960 Audio Codec. The following two pictures show a comparison of the original electronics (blue) and our new version (green/red/black). We took pictures of the topside and backside of each for a more thorough comparison.</p> <p>The new version actually includes three PCBs. The red microcontroller is the SparkFun Thing Plus ESP32. The black PCB is an early prototype of the SparkFun Audio Codec Breakout. The green PCB below is a custom \"motherboard\" that makes some connections between the two dev boards and provides the on/off/volume knob, 3.5mm TRS input, and mounting holes to mount this entire assembly into headphone can.</p> <ul> <li> <p> </p> <p>Topside</p> </li> <li> <p> </p> <p>Backside</p> </li> </ul> Click images for a closer view. <p>Using the WM8960 Audio Codec Breakout, we can mix together sound sources. In this use case, we are mixing together three sound sources:</p> <ol> <li> <p>) Wireless (aka \"BT\") audio from the ESP32 to the codec via I2S audio.</p> </li> <li> <p>) Wired audio from a 3.5mm TRS audio jack (common headphone cable connector).</p> </li> <li> <p>) Ambient microphones mounted to either sides of each ear-can, to provide a pair of stereo room mics to your listening experience. In a way, these microphones are \"giving you your ears back\". Most importantly, doing so at a safe volume, to prevent hearing loss.</p> </li> </ol>"},{"location":"introduction/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun Thing Plus - ESP32 WROOM (USB-C) [WRL-20168]</li> <li>1x SparkFun Audio Codec Breakout - WM8960 (Qwiic) [BOB-21250]</li> <li>1x Set of \"Mowing\" Headphones aka \"ear muffs\"<ul> <li>Smoostart Am/Fm Radio Hearing Protector, Noise Reduction Safety Ear Muffs, 30dB Noise Canceling Ear Protection</li> <li>PROTEAR Digital AM FM Radio Headphones, 25dB NRR Ear Protection Safety Ear Muffs </li> </ul> </li> <li>2x Ambient Microphones [PUI-AOM-5053L-HD3-LW100-R]</li> <li>1x Custom \"motherboard\" PCB (open-source design on GitHub here, you'll just need to order from your favorite fab house!)</li> <li>1x USB-C Cable<ul> <li>Our USB 2.0 A to C Cable [CAB-15092] will do nicely</li> <li>Our USB 3.1 A to C Cable [CAB-14743] is a good choice too</li> </ul> </li> <li>1x PET Expandable Braided Sleeving</li> <li>1x 3.5mm Audio Jack (SMD) [SJ-3523-SMT-TR]</li> <li>1x Potentiometer with Switch [652-PTR902-2015FA203]</li> </ul>"},{"location":"introduction/#tools","title":"Tools","text":"<p>You will need to solder various connections using hook-up wire, microphone cable, PTH/SMD parts, and header pins. You may already have a few of these items but if not, the tools and hardware below will help. See suggested reading below for any help with learning or refreshing these assembly skills.</p> <ul> <li>1x Hook-Up Wire - Assortment (Stranded, 22 AWG) [PRT-11375]</li> <li>2x Break Away Male Headers - Right Angle [PRT-00553]</li> <li>Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded) [TOL-22263]</li> <li>Soldering Iron [TOL-14456]</li> <li>Solder Lead Free - 15-gram Tube [TOL-9163]</li> <li>Hot Glue Gun and Hot Glue</li> <li>Dremel or similar tool for cutting out holes for ambient mics</li> </ul>"},{"location":"introduction/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> Installing an Arduino Library </p> </li> </ul> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> ESP32 Thing Plus (USB-C) Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Audio Codec Breakout - WM8960 Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Analog MEMS Microphone (VM2020) Hookup Guide </p> </li> </ul>"},{"location":"microphone_selection/","title":"Microphone Selection","text":""},{"location":"microphone_selection/#specifications","title":"Specifications","text":"<p>For this particular project, we needed a microphone with three specific characteristics:</p> <ol> <li> <p>) It needed to have a high acoustic overload point (AOP). This would allow the microphones to be located on the outside of the ear-cans, very close to a full-volume acoustic drum set, and still not distort. Our final mic choice has an AOP of 135dB.</p> </li> <li> <p>) It needed to have a large signal to noise ratio (SNR). This means that the  microphone will output a cleaner signal with less \"hiss\" sound during quiet times.  Something with at least 60dB or great would work. Our ultimate choice was for a microphone that had 75dB SNR.</p> </li> <li> <p>) It needed decent sensitivity. Something near the range of -35dB would do. Note,  when this number gets higher, that means it's more sensitive. Because sensitivity is almost always expressed as a negative number, that means a \"smaller\" negative number is more sensitive.</p> </li> </ol> <p>To learn more about microphone specifications such as AOP, SNR, sensitivity, please check out this very informative document from InvenSense here:</p> InvenSense Application Note AN\u20101112, MICROPHONE SPECIFICATIONS EXPLAINED <p>I tried three other microphones before I found my favorite. Here is a table to show the others options, and how they compare in terms of mic specs.</p> Mic              AOP              SNR              Sensitivity              Notes              ICS-40180              124dB              65dB              \u221238dB              With the onboard op amp gain, this ultimately had too low of an resulting AOP for drums. It clipped a lot when I played loudly.                                   SPH8878LR5H-1              134dB              66dB              -44dB              Again, with the onboard op amp gain, this ultimately had too low of an AOP for drums. It clipped a lot when I played loudly.                                            VM2020              149dB              50dB              -63dB              With such a high AOP, this mic could definitely handle the loud drums without clipping. This was a huge win, and actually, I used these mics for quite a while. But then I started to notice that during quiet times, there was a significant \"hiss\" in the audio signal. This is because it is, in terms of audio microphones, not very sensitive (-63dB). In order to hear the signal at a decent level, I had to add 60dB to 70dB of gain in the WM8960, which also can add some hiss to the signal.                                      AOM-5035L              135dB              75dB              -35dB              The best combination of high AOP, impressive sensitivity and SNR. No clipping and no hiss. This one fits the job!"},{"location":"microphone_selection/#options","title":"Options","text":"<p>Here are the four microphones we ultimately tested. Note, although for our application, the AOM-5035 was the right choice, you might like to consider trying out some of the other mics and see if they work for your use case. If I were making these for playing piano or any kind of quieter environment, I might go with one of the MEMs.</p> <ul> <li> <p> </p> <p> SparkFun Analog MEMS Microphone Breakout - ICS-40180    BOB-18011 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Analog MEMS Microphone Breakout - SPH8878LR5H-1    BOB-19389 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Analog MEMS Microphone Breakout - VM2020    BOB-21537 </p> </li> </ul> <ul> <li> <p> </p> <p> PUI Audio: MIC ANLG OMNI -35DB    AOM-5035L-HD3-LW100-R </p> </li> </ul>"},{"location":"resources/","title":"Resources","text":"<p>For more resources related to this project, check out the links listed here:</p> <ul> <li>General<ul> <li>Arduino Code (ZIP)</li> <li>Block Diagram (JPG)</li> <li>Wiring Diagram (JPG)</li> <li>Mic Circuit (PNG)</li> <li>AOM-5035 Microphone Datasheet (PDF)</li> <li>App Note on Mic Specs AN-1112-v1.1 (PDF)</li> </ul> </li> <li>Custom Mother-board PCB<ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Board Dimensions (PDF)</li> <li>Board Dimensions (DXF)</li> </ul> </li> <li>Audio Codec<ul> <li>SparkFun Audio Codec Breakout - WM8960 (Qwiic) [BOB-21250]</li> <li>Hookup Guide</li> <li>GitHub Hardware Repo</li> <li>Arduino Library</li> <li>SFE WM8960 Product Showcase</li> </ul> </li> <li>ESP32 Thing Plus<ul> <li>SparkFun Thing Plus - ESP32 WROOM (USB-C) [WRL-20168]</li> <li>Hookup Guide</li> <li>GitHub Hardware Repo</li> </ul> </li> </ul> <p>Looking for more information related to the SuperHeadphones, check out the following IEEE article below!</p> <ul> <li> <p> <p> IEEE: Build Your Own Hi-fi Ear Defenders &gt; An inexpensive solution to hearing well in loud environments </p>"},{"location":"single_page/","title":"Hardware Overview","text":"<p>This tutorial will guide you through how to build your own wireless and/or wired headphones with ambient microphones. We start with some off-the-shelf headphones intended for use while lawn mowing, and then hack in some new electronics to allow wireless (BT), auxiliary 3.5mm TRS input, and stereo ambient microphones. The original purpose of this project was to make it easy and safe to play loud music with a rock band in the basement, however, the inclusion of the natural sounds around you into your listening experience can be useful in many other situations.</p> <ul> <li> <p> <p>Headphones with Ambient Mics</p> <li> <p> <p>Project Demo Video</p>"},{"location":"single_page/#background","title":"Background","text":"<p>The first prototype design was sparked up around the time I was designing the Qwiic Speaker Amp in August of 2022. Now, over a year later, it has been through three major versions:</p> <ul> <li> <p> <p>August 2022 - \"V1\" Qwiic Speaker Amp</p> <li> <p> <p>November 2022 - \"V2\" WM8960 Codecs</p> <li> <p> <p>February 2023 - \"V3\" Custom PCB</p> <p>With this project, I was trying to solve three problems:</p> <ol> <li> <p>) I want to be able to lower all barriers to practicing music. The less things I have to set up, the better!</p> </li> <li> <p>) When I play drums, I need to protect my ears from getting damaged from exposure to extremely loud sounds. To do this, I usually wear in-ear monitors (IEMs). IEMs are kind of like headphones, but they are more like earbuds. They are usually custom-molded to your ear canal. In this way, they are actually working much like ear plugs and blocking out loud sounds while still providing sound to your ears. In order to get a great monitor mix, I then need to set up mics and a sound mixer. You can accomplish this with headphones too, but most do not provide a safe amount of sound-isolation. IEMs are great, but they are also very expensive. They can range from $300 to $3,000.</p> </li> <li> <p>) My eight year old son is playing loud music more and more (acoustic drums, amplified guitar and keyboards), and I want him to be able to protect his hearing while still being able to rock out and hear the music clearly. Over-the-ear hearing protection (aka \u201cEar Muffs\u201d), do a great job of protecting your hearing, but they also dampen the sound way too much. In addition to missing out on many of the mid and high frequencies, it can be very difficult to hear your own instrument and even your band mates.</p> </li> </ol> <p>My idea of a perfect solution:</p> <ul> <li> <p>Over-the-ear headphones that have stereo ambient mics to mix in!</p> </li> <li> <p>Very easy to \u201cpop on\u201d, with no cables attached. Nothing to wire up, just pop them on and go.</p> </li> <li> <p>Mix in a desired level of the ambient mics using a single knob, essentially a \u201cmore ears\u201d knob - right there on my headphones, at the ready to adjust as needed.</p> </li> <li> <p>Battery powered, 100% self contained, wireless. During some jam sessions with the kiddos, we will quickly trade instruments. We need to be able to jump around the room, free from wires and/or plugging and unplugging things.</p> </li> <li> <p>The ability to mix in a line level audio source (for practice tracks or other monitor signals from a mixer). This could come in handy for more advanced monitor sound system setups, where maybe I am getting a feed from the mixer that contains the rest of the musicians I am playing with.</p> </li> <li> <p>And icing on the cake, a Bluetooth\u00ae optional input. This last thing was really more useful for me during my solo practice sessions. I can load my phone up with my practice tracks and wirelessly connect to my headphones. Also, of course, useful for general listening.</p> </li> </ul>"},{"location":"single_page/#headphones","title":"Headphones","text":"<p>For this project, we chose over-the-ear headphones that provide a large amount of sound dampening (30dB). These types of headphones are also called ear-muffs and are often marketed for use during loud construction work or lawn mowing.</p> <p>The exact headphones we chose to start with were the following:</p> Smoostart Am/Fm Radio Hearing Protector, Noise Reduction Safety Ear Muffs, 30dB Noise Canceling Ear Protection <p>When using this type of lawn-mowing headphones without any modification, they provide adequate sound dampening to protect your ears in extremely loud places. However, with this benefit, you also lose the ability to hear your natural surroundings clearly. Usually, it is described as sounding a bit like two pillows are held to either ear. This is because the passive sound dampening is blocking most of the high frequencies.</p> <p>In order to get the sound clarity back, we need to use ambient microphones. The correct type of microphone can accept the loud sound sources without distortion. This type of microphone is said to have a high acoustic overload point, or AOP. We can send that clean audio signal from the microphones into the headphones at a safe listening level. In addition to a high AOP, the microphones also need to have a large signal to noise ratio (SNR), which helps avoid having too much \"hiss\" in the audio signal. Choosing the best microphone for the job turned out to involve a lot of testing. More on this later.</p>"},{"location":"single_page/#the-modification","title":"The Modification","text":"<p>In addition to sound dampening, the original electronics included the ability to listen to FM radio and plug in a 3.5mm TRS audio cable. In this tutorial, we will remove the stock electronics, and replace them with the SparkFun ESP32 Thing Plus and the WM8960 Audio Codec. The following two pictures show a comparison of the original electronics (blue) and our new version (green/red/black). We took pictures of the topside and backside of each for a more thorough comparison.</p> <p>The new version actually includes three PCBs. The red microcontroller is the SparkFun Thing Plus ESP32. The black PCB is an early prototype of the SparkFun Audio Codec Breakout. The green PCB below is a custom \"motherboard\" that makes some connections between the two dev boards and provides the on/off/volume knob, 3.5mm TRS input, and mounting holes to mount this entire assembly into headphone can.</p> <ul> <li> <p> </p> <p>Topside</p> </li> <li> <p> </p> <p>Backside</p> </li> </ul> Click images for a closer view. <p>Using the WM8960 Audio Codec Breakout, we can mix together sound sources. In this use case, we are mixing together three sound sources:</p> <ol> <li> <p>) Wireless (aka \"BT\") audio from the ESP32 to the codec via I2S audio.</p> </li> <li> <p>) Wired audio from a 3.5mm TRS audio jack (common headphone cable connector).</p> </li> <li> <p>) Ambient microphones mounted to either sides of each ear-can, to provide a pair of stereo room mics to your listening experience. In a way, these microphones are \"giving you your ears back\". Most importantly, doing so at a safe volume, to prevent hearing loss.</p> </li> </ol>"},{"location":"single_page/#required-materials","title":"Required Materials","text":"<p>To follow along with this tutorial, you will need the following materials. You may not need everything though depending on what you have. Add it to your cart, read through the guide, and adjust the cart as necessary.</p> <ul> <li>1x SparkFun Thing Plus - ESP32 WROOM (USB-C) [WRL-20168]</li> <li>1x SparkFun Audio Codec Breakout - WM8960 (Qwiic) [BOB-21250]</li> <li>1x Set of \"Mowing\" Headphones aka \"ear muffs\"<ul> <li>Smoostart Am/Fm Radio Hearing Protector, Noise Reduction Safety Ear Muffs, 30dB Noise Canceling Ear Protection</li> <li>PROTEAR Digital AM FM Radio Headphones, 25dB NRR Ear Protection Safety Ear Muffs </li> </ul> </li> <li>2x Ambient Microphones [PUI-AOM-5053L-HD3-LW100-R]</li> <li>1x Custom \"motherboard\" PCB (open-source design on GitHub here, you'll just need to order from your favorite fab house!)</li> <li>1x USB-C Cable<ul> <li>Our USB 2.0 A to C Cable [CAB-15092] will do nicely</li> <li>Our USB 3.1 A to C Cable [CAB-14743] is a good choice too</li> </ul> </li> <li>1x PET Expandable Braided Sleeving</li> <li>1x 3.5mm Audio Jack (SMD) [SJ-3523-SMT-TR]</li> <li>1x Potentiometer with Switch [652-PTR902-2015FA203]</li> </ul>"},{"location":"single_page/#tools","title":"Tools","text":"<p>You will need to solder various connections using hook-up wire, microphone cable, PTH/SMD parts, and header pins. You may already have a few of these items but if not, the tools and hardware below will help. See suggested reading below for any help with learning or refreshing these assembly skills.</p> <ul> <li>1x Hook-Up Wire - Assortment (Stranded, 22 AWG) [PRT-11375]</li> <li>2x Break Away Male Headers - Right Angle [PRT-00553]</li> <li>Wire Stripper - 20-30 AWG Solid (22-32 AWG Stranded) [TOL-22263]</li> <li>Soldering Iron [TOL-14456]</li> <li>Solder Lead Free - 15-gram Tube [TOL-9163]</li> <li>Hot Glue Gun and Hot Glue</li> <li>Dremel or similar tool for cutting out holes for ambient mics</li> </ul>"},{"location":"single_page/#suggested-reading","title":"Suggested Reading","text":"<p>If you aren\u2019t familiar with the following concepts, we also recommend checking out a few of these tutorials before continuing.</p> <ul> <li> <p> </p> <p> I2C </p> </li> </ul> <ul> <li> <p> </p> <p> Installing an Arduino Library </p> </li> </ul> <ul> <li> <p> </p> <p> How to Solder: Through Hole Soldering </p> </li> </ul> <ul> <li> <p> </p> <p> ESP32 Thing Plus (USB-C) Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Audio Codec Breakout - WM8960 Hookup Guide </p> </li> </ul> <ul> <li> <p> </p> <p> Analog MEMS Microphone (VM2020) Hookup Guide </p> </li> </ul>"},{"location":"single_page/#hardware-overview","title":"Hardware Overview","text":""},{"location":"single_page/#block-diagram","title":"Block Diagram","text":"<p>Here is a high-level block diagram of the sound system inside the headphones. The Audio Codec is central to this design. It handles all of the sound inputs and outputs. The ESP32 Thing Plus is still the \"brain\", and it is necessary  to setup and control the codec with I<sup>2</sup>C. The ESP32 also receives the wireless audio (BT), and then sends that to the codec, digitally, with I2S audio data lines.</p> <p></p> <p>High level block diagram of the headphone system.</p>"},{"location":"single_page/#exploded-view","title":"Exploded View","text":"<p>Here is an exploded view of the headphones. It took a little experimenting and tinkering to eventually disassemble all of the parts. In this section, we will share a few techniques we learned along the way during this hack.</p> <p></p> <p>Exploded view of the headphone system.</p>"},{"location":"single_page/#foam-removal","title":"Foam Removal","text":"<p>Removing the foam was pretty straight forward. You can use a flat head screwdriver or pliers, but be careful. As you can see, I accidentally ripped the foam apart when I pulled a bit too hard.  </p> <p></p> <p>Oops! I accidentally ripped the foam.</p> <p>It's really best to take it slowly and pull it gently, little-by-little. I really got the hang of this by the end of this project. I must have taken mine apart nearly 50 times as I fine tuned the wiring and swapped out microphones during testing. Hopefully, by reading this tutorial, you can keep this dis-assembly and reassembly cycle to a minimum. :)</p>"},{"location":"single_page/#screws","title":"Screws","text":"<p>After you remove the foam, this will expose the screws that hold the outer and inner parts of each can together.</p> <p></p> <p>Two small screws hold the cans together.</p> <p>The screws are located back behind the black plastic. Because of the angle, they can be a little difficult to access, but with a small Phillips head screwdriver and the right amount of pressure, it can be done.</p>"},{"location":"single_page/#knob-and-pcb-removal","title":"Knob and PCB removal","text":"<p>When the inner screws are removed, the cans come apart, and then you will see the original electronics (blue). The volume knob is simply pressure fitted onto the potentiometer shaft, so you can pull that directly off. Unscrew the potentiometer mounting nut and the four mounting screws, and you will then be able to remove the original electronics.</p> <p></p> <p>Knob, nut, and 4 mounting screws removed.</p>"},{"location":"single_page/#custom-pcb-assembly","title":"Custom PCB Assembly","text":"<p>Note, the custom PCB is not 100% necessary to complete this project. My early prototype \"V2\" was a hand-wired version. If you decide to go that route, then referencing the custom PCB Schematic PDF would be a good guide.</p> <p>If you do decided to order the custom PCB (or a version of your own), the \"mother board\" PCB will need some assembly too:</p> <ul> <li> <p>Use headers to solder in the Audio Codec and ESP32 Thing Plus.</p> </li> <li> <p>Solder into place the PTH right-angled potentiometer/switch.</p> </li> <li> <p>Solder into place the SMD 3.5mm TRS audio input connector.</p> </li> </ul> <ul> <li> <p> <p>Early Prototype V2</p> <li> <p> <p>Bare Custom PCB</p> <li> <p> <p>Assembled Custom PCB</p> Click images for a closer view."},{"location":"single_page/#wiring-diagram","title":"Wiring Diagram","text":"<p>Once everything is opened up, and you have your custom PCB assembled, you can begin wiring up the remaining necessary connections: microphones, speakers, and battery.</p> <p>Before you dive into soldering things up, here are three important things to remember:</p> <ul> <li> <p>Use 26 gauge wire for most of the connections, as it can get fairly tight in there. I used an old Ethernet cable which had 8 conductors. If you open those up, the resulting hookup wire is quite nice to work with, and has great coloring to keep things straight.</p> </li> <li> <p>The left microphone signal and its ground connection must use a shielded cable. If you wire it up with bare hook-up wire, then you will be prone to picking up strange sounds like distant radio stations and creeping whining noises with varying frequencies. Kind of fun, but not ideal for every listening experience.</p> </li> <li> <p>The microphones we ultimately chose require a specific power and signal circuit (see below).</p> </li> </ul> <p>Here is a wiring diagram to show all the connections in one place:</p> <p></p> <p>Wiring Diagram. Lots to hook up!</p>"},{"location":"single_page/#microphone-circuit","title":"Microphone Circuit","text":"<p>Here is the required circuit from the datasheet of the PUI Audio AOM-5035L.</p> <p></p> <p>AOM-5035L Microphone Signal &amp; Power Circuit</p> <p>Note, the capacitor is already included on the WM8960 input, and so we only need to wire up the pull-down resistor of 5.6K on the signal. Put this pull-down resistor as close to the microphone as possible. The left microphone is the only one that is more susceptible to picking up noise, and so we found that having the pull-down in that ear-can (and using a shielded mic cable) eliminated any unwanted noise.</p> <p>As a side note, the proximity of the pull-down resistor to the microphone also had an effect on the acoustic overload point (AOP). Strangely, if the resistor was placed too far away, then the mics begin clipping at lower sound source volumes. During my early testing, I would hear clipping in my left ear when I really played hard on the hi-hats (which are probably the loudest and closest drum instrument to that microphone). But as soon as I moved the pull-down closer to the mic, the clipping went away!</p> <p>Here is some close up shots of where I ended up hacking in the final position of each pull-down resistor. Note, I didn't have the exact 5.6K\u03a9 resistors required, so for the left ear, I used two 2.2K\u03a9s in series. And for the right, I used a 4.7K\u03a9.</p> <ul> <li> <p> </p> <p>Left mic pull-down resistor</p> </li> <li> <p> </p> <p>Right mic pull-down resistor</p> </li> </ul>"},{"location":"single_page/#installing-arduino-libraries","title":"Installing Arduino Libraries","text":"<p>Arduino</p>"},{"location":"single_page/#arduino-ide","title":"Arduino IDE","text":"<p>This example assumes you are using the latest version of the Arduino IDE on your desktop. If this is your first time using Arduino IDE and a library, please review the following tutorials.</p> <ul> <li>Installing the Arduino IDE</li> <li>Installing an Arduino Library</li> </ul>"},{"location":"single_page/#usb-to-serial-drivers","title":"USB-to-Serial Drivers","text":"<p>If you've never connected a CH340 device to your computer before, you may need to install drivers for the USB-to-serial converter. Check out our section on \"How to Install CH340 Drivers\" for help with the installation.</p>"},{"location":"single_page/#wm8960-audio-codec","title":"WM8960 Audio Codec","text":"<p>SparkFun has written a library to work with the SparkFun Audio Codec Breakout - WM8960 (Qwiic). You can obtain this library through the Arduino Library Manager by searching for \"SparkFun Audio Codec Breakout WM8960\". Find the one written by SparkFun Electronics and install the latest version. Users who prefer to manually install the library can get it from the  GitHub Repository or download the .ZIP by clicking the button below:</p> SparkFun WM8960 Arduino Library (ZIP)"},{"location":"single_page/#esp32-a2dp","title":"ESP32-A2DP","text":"<p>Paul Schatzmann has written a library to work with I2S audio and wireless audio (BT) using the ESP32 microcontrollers. To manually install the library, get it from the  GitHub Repository or download the .ZIP by clicking the button below:</p> Paul Schatzmann's ESP32-A2DP Arduino Library (ZIP)"},{"location":"single_page/#arduino-code","title":"Arduino Code","text":"<p>Now that we have our libraries installed, we can compile and upload the Arduino code to the ESP32 Thing Plus.</p>"},{"location":"single_page/#serial-upload","title":"Serial Upload","text":"<p>Below is the Arduino sketch INO for this project. Copy and paste the code below in your Arduino IDE.</p> SuperHeadphones Arduino Sketch Super_Headphones_BT_and_MIC_V2.0.ino <pre><code>/*\nSuper Headphones\nSparkFun Electronics\nPete Lewis\nSeptember 2023\n\nUsing an ESP32 Thing Plus and a WM8960 Audio Codec,\nThis project enables you to create your own wireless headphones (aka BT).\nIt also alows you to mix in a pair of ambient microphones!\nRead the tutorial here:\nhttps://docs.sparkfun.com/SuperHeadphones/\n\nThis code utilized Paul Schatzmann's ESP32-A2DP library to make all the wireless \naudio (BT) functionality happen. Big thank you to Paul Schatzmann and the many others \nwho have contributed to that library!\nDownload here: https://github.com/pschatzmann/ESP32-A2DP\n\n  Do you like this open source code? Help support SparkFun. Buy a board!\n\n    SparkFun Audio Codec Breakout - WM8960 (Qwiic)\n    https://www.sparkfun.com/products/21250\n\n    SparkFun Thing Plus - ESP32 WROOM (USB-C)\n    https://www.sparkfun.com/products/20168\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.\n*/\n\n#include &lt;Wire.h&gt;\n#include &lt;SparkFun_WM8960_Arduino_Library.h&gt;  // CTRL+Click here to get the library: http://librarymanager/All#SparkFun_WM8960\nWM8960 codec1;\n\n#include \"BluetoothA2DPSink.h\" // To manually install, download here: https://github.com/pschatzmann/ESP32-A2DP\nBluetoothA2DPSink a2dp_sink;\n\n//// Iot Redboard\n//#define I2S_WS 16\n//#define I2S_SD 25\n//#define I2S_SDO 17\n//#define I2S_SCK 14\n\n// ESP32 Thing Plus C\n#define I2S_WS 13\n#define I2S_SD 27\n#define I2S_SDO 14\n#define I2S_SCK 32\n\n// Use I2S Processor 0\n#define I2S_PORT I2S_NUM_0\n\n// Define input buffer length\n#define bufferLen 64\nint16_t sBuffer[bufferLen];\n\nint pgaGain1 = 25;\n\nint pgaGain1_prev = 0;\n\n#define NUM_OF_READINGS 20\nlong userInputA0;\nint userInputArray[NUM_OF_READINGS] = {};  // used to make a rolling average of readings on ADC input\nint arrayPos = 0;\n#define PGA_GAIN_SETTING_MAX 32 // don't really need more than this on the PGA, so let's put a max on it so no one gets too crazy.\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println(\" \");\n\n  Wire.begin();\n  Wire.setClock(100000);\n\n  if (codec1.begin() == false)  //Begin communication over I2C\n  {\n    Serial.println(\"The codec 1 did not respond. Please check wiring.\");\n    while (1)\n      ;  //Freeze\n  }\n  Serial.println(\"Codec1 is connected properly.\");\n\n  codec1_setup();\n\n  // Set up I2S\n  i2s_install();\n  i2s_setpin();\n\n  a2dp_sink.start(\"SuperHeadphones\");\n}\n\nvoid loop() {\n\n  // Read the volumet potentiometer to set the volume of the ambient mics.\n  // Every loop:\n  // - take a reading and put it into the array\n  // - increment position\n  // - loop back position to start of array \n  // - when we reach the end take all readings in array, and create a rolling average.\n\n  userInputArray[arrayPos] = analogRead(A0);\n  arrayPos += 1;\n  if (arrayPos &gt; NUM_OF_READINGS) arrayPos = 0;\n  int total = 0;\n  for (int i = 0; i &lt; NUM_OF_READINGS; i++) total += userInputArray[i];\n  userInputA0 = total / NUM_OF_READINGS;\n  // map it from 0-4096, to a value that is acceptable in the pga gain (0-63)\n  // 0-63, (0 = -17.25dB) &lt;&lt;-- 0.75dB steps --&gt;&gt; (23 = +0dB)...(63 = +30dB)\n  pgaGain1 = map(userInputA0, 0, 4096, PGA_GAIN_SETTING_MAX, 0);\n\n  if (pgaGain1 != pgaGain1_prev) {\n    codec1.setLINVOL(pgaGain1);\n    codec1.setRINVOL(pgaGain1);\n    Serial.print(\"pgaGain1: \");\n    Serial.println(pgaGain1);\n  }\n\n  pgaGain1_prev = pgaGain1;\n  delay(10);\n}\n\n\nvoid codec1_setup() {\n  // General setup needed\n  codec1.enableVREF();\n  codec1.enableVMID();\n\n  //codec1.enableMicBias();\n\n  // WM8960_MIC_BIAS_VOLTAGE_0_9_AVDD (0.9*AVDD) or\n  // WM8960_MIC_BIAS_VOLTAGE_0_65_AVDD (0.65*AVDD)\n  //codec1.setMicBiasVoltage(WM8960_MIC_BIAS_VOLTAGE_0_9_AVDD);\n\n  // setup signal flow to the ADC\n\n  codec1.enableLMIC();\n  codec1.enableRMIC();\n\n  // connect from INPUT1 to \"n\" (aka inverting) inputs of PGAs.\n  codec1.connectLMN1();\n  codec1.connectRMN1();\n\n  // disable mutes on PGA inputs (aka INTPUT1)\n  codec1.disableLINMUTE();\n  codec1.disableRINMUTE();\n\n  // set input boosts to get inputs 1 to the boost mixers\n  codec1.setLMICBOOST(WM8960_MIC_BOOST_GAIN_0DB);  // 0 = 0dB\n  codec1.setRMICBOOST(WM8960_MIC_BOOST_GAIN_0DB);  // 0 = 0dB\n\n  codec1.pgaLeftNonInvSignalSelect(WM8960_PGAL_VMID);   // for single ended input on LIN1\n  codec1.pgaRightNonInvSignalSelect(WM8960_PGAL_VMID);  // for single ended input on RIN1\n\n  //codec1.enablePgaZeroCross();\n\n  codec1.connectLMIC2B();\n  codec1.connectRMIC2B();\n\n  // enable boost mixers\n  codec1.enableAINL();\n  codec1.enableAINR();\n\n  // enable output mixers\n  codec1.enableLOMIX();\n  codec1.enableROMIX();\n\n  // Enable bypass connection from Left INPUT3 to Left output mixer, note, the\n  // default gain on this input (LI2LOVOL) is -15dB\n  codec1.enableLI2LO();\n  codec1.enableRI2RO();\n\n  // Sets volume control between \"left input\" to \"left output mixer\"\n  codec1.setLI2LOVOL(WM8960_OUTPUT_MIXER_GAIN_0DB);\n  codec1.setRI2ROVOL(WM8960_OUTPUT_MIXER_GAIN_0DB);\n\n\n  //  LB2LO (booster to output mixer (analog bypass)\n  codec1.enableLB2LO();\n  codec1.enableRB2RO();\n\n  // connect from DAC outputs to output mixer\n  codec1.enableLD2LO();\n  codec1.enableRD2RO();\n\n  // set gainstage between booster mixer and output mixer\n  // for this loopback example, we are going to keep these as low as they go\n  codec1.setLB2LOVOL(WM8960_OUTPUT_MIXER_GAIN_0DB);  // 0 = -21dB\n  codec1.setRB2ROVOL(WM8960_OUTPUT_MIXER_GAIN_0DB);  // 0 = -21dB\n\n  // CLOCK STUFF, These settings will get you 44.1KHz sample rate, and class-d freq at 705.6kHz\n  codec1.enablePLL();  // needed for class-d amp clock\n  codec1.setPLLPRESCALE(WM8960_PLLPRESCALE_DIV_2);\n  codec1.setSMD(WM8960_PLL_MODE_FRACTIONAL);\n  codec1.setCLKSEL(WM8960_CLKSEL_PLL);\n  codec1.setSYSCLKDIV(WM8960_SYSCLK_DIV_BY_2);\n  codec1.setBCLKDIV(4);\n  codec1.setDCLKDIV(WM8960_DCLKDIV_16);\n  codec1.setPLLN(WM8960_DCLKDIV_16);\n  codec1.setPLLK(0x86, 0xC2, 0x26);  // PLLK=86C226h\n  //codec1.set_ADCDIV(0); // default is 000 (what we need for 44.1KHz), so no need to write this.\n  //codec1.set_DACDIV(0); // default is 000 (what we need for 44.1KHz), so no need to write this.\n  codec1.setWL(WM8960_WL_16BIT);\n\n  codec1.enablePeripheralMode();\n  //codec1.enableMasterMode();\n  //codec1.set_ALRCGPIO(); // note, should not be changed while ADC is enabled.\n\n  // enable ADCs and DACs\n  codec1.enableAdcLeft();\n  codec1.enableAdcRight();\n  codec1.enableDacLeft();\n  codec1.enableDacRight();\n  codec1.disableDacMute();\n\n  //codec1.enableLoopBack(); // Loopback sends ADC data directly into DAC\n  codec1.disableLoopBack();\n  codec1.disableDacMute();  // default is \"soft mute\" on, so we must disable mute to make channels active\n\n  codec1.enableHeadphones();\n  //codec1.enableSpeakers();\n  codec1.enableOUT3MIX();  // provides VMID as buffer for headphone ground\n  //codec1.enableSpeakerZeroCross();\n\n  Serial.println(\"Volume set to +0dB\");\n  //codec1.setSpeakerVolume(120);\n  codec1.setHeadphoneVolumeDB(0.00);\n  //codec1.enable3d();\n\n  Serial.println(\"Codec 1 Setup complete. Listen to left/right INPUT1 on Speaker outputs.\");\n  delay(10);\n\n  codec1.setLINVOL(23);\n  codec1.setRINVOL(23);\n}\n\nvoid i2s_install() {\n  // Set up I2S Processor configuration\n  static i2s_config_t i2s_config = {\n    .mode = (i2s_mode_t)(I2S_MODE_MASTER | I2S_MODE_TX),\n    .sample_rate = 44100,  // Updated automatically by A2DP\n    .bits_per_sample = (i2s_bits_per_sample_t)16,\n    .channel_format = I2S_CHANNEL_FMT_RIGHT_LEFT,\n    .communication_format = (i2s_comm_format_t)(I2S_COMM_FORMAT_STAND_I2S),\n    .intr_alloc_flags = 0,  // Default interrupt priority\n    .dma_buf_count = 8,\n    .dma_buf_len = 64,\n    .use_apll = true,\n    .tx_desc_auto_clear = true  // Avoiding noise in case of data unavailability\n  };\n  a2dp_sink.set_i2s_config(i2s_config);\n}\n\nvoid i2s_setpin() {\n  // Set I2S pin configuration\n  i2s_pin_config_t my_pin_config = {\n    .bck_io_num = I2S_SCK,\n    .ws_io_num = I2S_WS,\n    .data_out_num = I2S_SDO,\n    .data_in_num = I2S_PIN_NO_CHANGE\n  };\n  a2dp_sink.set_pin_config(my_pin_config);\n}\n</code></pre> <p>Select your board in the Tools menu (in our case ESP32 Thing Plus) and the correct Port it enumerated on and click \"Upload\". After uploading the code, open the Serial Monitor or terminal emulator of your choice with the baud rate set to 115200. You should see the following message pop up. And then as you turn the volume potentiometer, the setting value will be printed to the terminal.</p> <p>If you see the above messages in your terminal, then you should be ready to try out some listening. Put your headphones on and try adjusting the potentiometer. As you turn the knob (clockwise), this will increase the volume level of the microphones.</p> <p>One way to verify the system is to turn the volume all the way up and gently rub each microphone with your fingertip. You should hear a quiet scratching sound in the corresponding headphone ear speaker.</p> <p>Note, if you hear a lot of buzzing, it is most likely the USB cable. Try unplugging the USB cable, and powering only from the battery. The battery will be a much quieter power source, and so should not add any noise into the audio signal.</p>"},{"location":"single_page/#wireless-connection","title":"Wireless connection","text":"<p>In addition to the messages sent to the serial terminal, the provided code sets up the ESP32 Thing Plus to be an audio receiver as a bluetooth A2DP Sink.</p> <p>After powering up your headphones, use your PC or cell phone to find a Bluetooth device named \"SuperHeadphones\".</p> <ul> <li> <p> </p> <p>Connect BT with your PC</p> </li> <li> <p> </p> <p>Connect to BT with your cell phone</p> </li> </ul> <p>Click Connect. Now you can play audio from your PC program or phone app and listen on your superheadphones!</p> <p>Note, the volume control for this sound source is controlled by adjusting the setting on your computer or cell phone. The knob on the headphones is only used to adjust the volume of the ambient microphones.</p>"},{"location":"single_page/#diving-deeper","title":"Diving deeper","text":"<p>The provided code for this project is a combination of other Arduino example sketches. Review these for further information on how each section of the code works.</p> <ul> <li> <p>WM8960 Arduino Library Examples:</p> <ul> <li> <p>Example 3: Line Input 1</p> </li> <li> <p>Example 9: I2S Bluetooth</p> </li> <li> <p>Example 10: ADC Gain</p> </li> </ul> </li> <li> <p>ESP32-A2DP Arduino Library Examples:</p> <ul> <li> <p>bt_music_receiver_simple</p> </li> <li> <p>I2S pin definition</p> </li> <li> <p>I2S configuration</p> </li> </ul> </li> </ul>"},{"location":"single_page/#microphone-selection","title":"Microphone Selection","text":""},{"location":"single_page/#specifications","title":"Specifications","text":"<p>For this particular project, we needed a microphone with three specific characteristics:</p> <ol> <li> <p>) It needed to have a high acoustic overload point (AOP). This would allow the microphones to be located on the outside of the ear-cans, very close to a full-volume acoustic drum set, and still not distort. Our final mic choice has an AOP of 135dB.</p> </li> <li> <p>) It needed to have a large signal to noise ratio (SNR). This means that the  microphone will output a cleaner signal with less \"hiss\" sound during quiet times.  Something with at least 60dB or great would work. Our ultimate choice was for a microphone that had 75dB SNR.</p> </li> <li> <p>) It needed decent sensitivity. Something near the range of -35dB would do. Note,  when this number gets higher, that means it's more sensitive. Because sensitivity is almost always expressed as a negative number, that means a \"smaller\" negative number is more sensitive.</p> </li> </ol> <p>To learn more about microphone specifications such as AOP, SNR, sensitivity, please check out this very informative document from InvenSense here:</p> InvenSense Application Note AN\u20101112, MICROPHONE SPECIFICATIONS EXPLAINED <p>I tried three other microphones before I found my favorite. Here is a table to show the others options, and how they compare in terms of mic specs.</p> Mic              AOP              SNR              Sensitivity              Notes              ICS-40180              124dB              65dB              \u221238dB              With the onboard op amp gain, this ultimately had too low of an resulting AOP for drums. It clipped a lot when I played loudly.                                   SPH8878LR5H-1              134dB              66dB              -44dB              Again, with the onboard op amp gain, this ultimately had too low of an AOP for drums. It clipped a lot when I played loudly.                                            VM2020              149dB              50dB              -63dB              With such a high AOP, this mic could definitely handle the loud drums without clipping. This was a huge win, and actually, I used these mics for quite a while. But then I started to notice that during quiet times, there was a significant \"hiss\" in the audio signal. This is because it is, in terms of audio microphones, not very sensitive (-63dB). In order to hear the signal at a decent level, I had to add 60dB to 70dB of gain in the WM8960, which also can add some hiss to the signal.                                      AOM-5035L              135dB              75dB              -35dB              The best combination of high AOP, impressive sensitivity and SNR. No clipping and no hiss. This one fits the job!"},{"location":"single_page/#options","title":"Options","text":"<p>Here are the four microphones we ultimately tested. Note, although for our application, the AOM-5035 was the right choice, you might like to consider trying out some of the other mics and see if they work for your use case. If I were making these for playing piano or any kind of quieter environment, I might go with one of the MEMs.</p> <ul> <li> <p> </p> <p> SparkFun Analog MEMS Microphone Breakout - ICS-40180    BOB-18011 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Analog MEMS Microphone Breakout - SPH8878LR5H-1    BOB-19389 </p> </li> </ul> <ul> <li> <p> </p> <p> SparkFun Analog MEMS Microphone Breakout - VM2020    BOB-21537 </p> </li> </ul> <ul> <li> <p> </p> <p> PUI Audio: MIC ANLG OMNI -35DB    AOM-5035L-HD3-LW100-R </p> </li> </ul>"},{"location":"single_page/#whats-next","title":"What's next","text":"<p>The next generation of super headphones might include some additional features. Here are some of my ideas:</p>"},{"location":"single_page/#mic-signal-output","title":"Mic Signal Output","text":"<p>With an additional WM8960 codec, I could send a copy of the isolated ambient mics to a line-level output. This would be handy for recording. Especially, if I just want to get an idea down with decent sound quality. The movement of my head (particularly rotationally) plays into the sound, so this is not ideal for recording for a final mix, but super handy for practice recordings.</p>"},{"location":"single_page/#advanced-audio-processing","title":"Advanced Audio Processing","text":"<p>It would be nice to take in the I2S audio from the codec and add some digital effects. For example EQ, compression and/or limiting could be very nice. I also find my carpeted basement to sound slightly tight. It would be killer to add in some reverb!</p>"},{"location":"single_page/#additional-mics","title":"Additional Mics","text":"<p>I have thought that adding a second set of ambient mics with higher sensitivity could be a nice improvement. Although the current mics (PUI-AOM-5035) do great for loud environments, it is not 100% ideal for use in quieter environments. If you want to capture quieter sound sources (like acoustic instruments such as piano, guitar or even conversation), then a more sensitive microphone is better suited for the job. A more sensitive microphone requires less gain to capture the quieter sounds, and thus produces less noise in those situations.</p> <p>Mixing the two microphones automatically would be ideal. But this would require a rather uncommon effect on the sensitive  mic. You'd have to use an \"inverted\" noise gate. This would shut down the signal from the sensitive mic when it gets close to its clipping level, and then open up the gate to the high AOP mic at the same time.</p> <p>It turns out that PUI makes another similar microphone that is 11dB more sensitive, and has a whopping 80dB SNR! See the specs here:</p> PUI AOM-5024"},{"location":"single_page/#custom-3d-printed-cans","title":"Custom 3D Printed Cans!","text":"<p>Currently, the generic headphones I have hacked are pretty comfy, but I do notice the pressure of the pads on my ears. When I\u2019m drumming, I don\u2019t seem to mind - probably because I\u2019m so focused on playing. But for general listening, I start to become a bit uncomfortable after 30 minutes or so. My ears are pretty long (I guess), and they angle out away from my head, so these headphones are essentially squishing my ears against my skull.</p> <p>I've already begun the journey to creating some very custom headphones. I think that I should be able to make something that still has a really good seal to block out the loud sounds, but also is super comfy. I\u2019ll probably make some for my kid too, because he needs to take breaks due to the ear-muffs causing some discomfort.</p> <p>The basic idea I have is to scan in my head, then design some custom fit headphones.  Ideally, the cans and internal speaker drivers wouldn't touch my ears at all. Also, the touch points around my ears would have a custom adapter that would apply equal pressure all around.</p> <p>It has started with a decent scan using photogrammetry. To learn more about this process, check out this wonderful YouTube video by Punished Props Academy:</p> <ul> <li> <p> <p>A great tutorial video on photogrammetry</p> <p>After following along with that video, and doing a few practice scans, I was able to successfully scan my head.</p> <p>Then it is only a matter of importing the mesh into Fusion 360 and designing around the model of my head and ears.</p> <p>Going into detail about how this is all done is beyond the scope of this tutorial, but I thought I'd share some of the photos from the design work that is currently still in progress.</p> <p>Cheers and happy hacking!</p> <ul> <li> </li> </ul> <ul> <li> </li> </ul> <ul> <li> </li> </ul> <p></p> <p>My first print... fresh out of the gray goop!</p>"},{"location":"single_page/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<p>Info</p> <p><p> Not working as expected and need help? </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> SparkFun Technical Assistance Page <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.<p></p>"},{"location":"single_page/#resources","title":"Resources:","text":"<p>For more resources related to this project, check out the links listed here:</p> <ul> <li>General<ul> <li>Arduino Code (ZIP)</li> <li>Block Diagram (JPG)</li> <li>Wiring Diagram (JPG)</li> <li>Mic Circuit (PNG)</li> <li>AOM-5035 Microphone Datasheet (PDF)</li> <li>App Note on Mic Specs AN-1112-v1.1 (PDF)</li> </ul> </li> <li>Custom Mother-board PCB<ul> <li>Schematic (PDF)</li> <li>Eagle Files (ZIP)</li> <li>Board Dimensions (PNG)</li> <li>Board Dimensions (PDF)</li> <li>Board Dimensions (DXF)</li> </ul> </li> <li>Audio Codec<ul> <li>SparkFun Audio Codec Breakout - WM8960 (Qwiic) [BOB-21250]</li> <li>Hookup Guide</li> <li>GitHub Hardware Repo</li> <li>Arduino Library</li> <li>SFE WM8960 Product Showcase</li> </ul> </li> <li>ESP32 Thing Plus<ul> <li>SparkFun Thing Plus - ESP32 WROOM (USB-C) [WRL-20168]</li> <li>Hookup Guide</li> <li>GitHub Hardware Repo</li> </ul> </li> </ul> <p>Looking for more information related to the SuperHeadphones, check out the following IEEE article below!</p> <ul> <li> <p> <p> IEEE: Build Your Own Hi-fi Ear Defenders &gt; An inexpensive solution to hearing well in loud environments </p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Info</p> <p><p> Not working as expected and need help? </p> <p>If you need technical assistance and more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting.</p> SparkFun Technical Assistance Page <p>If you can't find what you need there, you'll need a Forum Account to search product forums and post questions.<p></p>"},{"location":"whats_next/","title":"What's Next","text":"<p>The next generation of super headphones might include some additional features. Here are some of my ideas:</p>"},{"location":"whats_next/#mic-signal-output","title":"Mic Signal Output","text":"<p>With an additional WM8960 codec, I could send a copy of the isolated ambient mics to a line-level output. This would be handy for recording. Especially, if I just want to get an idea down with decent sound quality. The movement of my head (particularly rotationally) plays into the sound, so this is not ideal for recording for a final mix, but super handy for practice recordings.</p>"},{"location":"whats_next/#advanced-audio-processing","title":"Advanced Audio Processing","text":"<p>It would be nice to take in the I2S audio from the codec and add some digital effects. For example EQ, compression and/or limiting could be very nice. I also find my carpeted basement to sound slightly tight. It would be killer to add in some reverb!</p>"},{"location":"whats_next/#additional-mics","title":"Additional Mics","text":"<p>I have thought that adding a second set of ambient mics with higher sensitivity could be a nice improvement. Although the current mics (PUI-AOM-5035) do great for loud environments, it is not 100% ideal for use in quieter environments. If you want to capture quieter sound sources (like acoustic instruments such as piano, guitar or even conversation), then a more sensitive microphone is better suited for the job. A more sensitive microphone requires less gain to capture the quieter sounds, and thus produces less noise in those situations.</p> <p>Mixing the two microphones automatically would be ideal. But this would require a rather uncommon effect on the sensitive  mic. You'd have to use an \"inverted\" noise gate. This would shut down the signal from the sensitive mic when it gets close to its clipping level, and then open up the gate to the high AOP mic at the same time.</p> <p>It turns out that PUI makes another similar microphone that is 11dB more sensitive, and has a whopping 80dB SNR! See the specs here:</p> PUI AOM-5024"},{"location":"whats_next/#custom-3d-printed-cans","title":"Custom 3D Printed Cans!","text":"<p>Currently, the generic headphones I have hacked are pretty comfy, but I do notice the pressure of the pads on my ears. When I\u2019m drumming, I don\u2019t seem to mind - probably because I\u2019m so focused on playing. But for general listening, I start to become a bit uncomfortable after 30 minutes or so. My ears are pretty long (I guess), and they angle out away from my head, so these headphones are essentially squishing my ears against my skull.</p> <p>I've already begun the journey to creating some very custom headphones. I think that I should be able to make something that still has a really good seal to block out the loud sounds, but also is super comfy. I\u2019ll probably make some for my kid too, because he needs to take breaks due to the ear-muffs causing some discomfort.</p> <p>The basic idea I have is to scan in my head, then design some custom fit headphones.  Ideally, the cans and internal speaker drivers wouldn't touch my ears at all. Also, the touch points around my ears would have a custom adapter that would apply equal pressure all around.</p> <p>It has started with a decent scan using photogrammetry. To learn more about this process, check out this wonderful YouTube video by Punished Props Academy:</p> <ul> <li> <p> <p>A great tutorial video on photogrammetry</p> <p>After following along with that video, and doing a few practice scans, I was able to successfully scan my head.</p> <p>Then it is only a matter of importing the mesh into Fusion 360 and designing around the model of my head and ears.</p> <p>Going into detail about how this is all done is beyond the scope of this tutorial, but I thought I'd share some of the photos from the design work that is currently still in progress.</p> <p>Cheers and happy hacking!</p> <ul> <li> </li> </ul> <ul> <li> </li> </ul> <ul> <li> </li> </ul> <p></p> <p>My first print... fresh out of the gray goop!</p>"},{"location":"assets/board_files/","title":"board_files directory","text":"<ol> <li>A <code>dimensions*.pdf</code> file containing the board's measurements.</li> <li>A <code>schematic.pdf</code> file containing the board's schematics.</li> <li>An <code>eagle_files*.zip</code> folder containing the Eagle CAD schematics (<code>*.sch</code>) and PCB design (<code>*.brd</code>) files.<ul> <li>A freeware version of Autodesk Eagle can be found here. </li> </ul> </li> </ol>"},{"location":"assets/component_documentation/","title":"component_documentation directory","text":"<p>Copies of the datasheets, user manuals, programming guides, etc. of the major electrical components on the board.</p>"},{"location":"assets/img/","title":"img directory","text":"<p>This folder should contain the images for the product documentation</p>"},{"location":"assets/img/#general-images","title":"General Images","text":"<ul> <li><code>sfe_logo_sm.png</code> - SparkFun flame logo (Cover page for with-pdf extension)</li> <li><code>sfe_logo_sq.png</code> - SparkFun flame logo (favicon)</li> </ul>"},{"location":"assets/img/#directory","title":"Directory","text":"<ul> <li><code>qr_code</code> - QR codes for the product documentation</li> </ul>"},{"location":"assets/img/#qr-codes","title":"QR Codes","text":"<ul> <li>QR code generator<ul> <li>Flame Color: #E0311D</li> <li>Frame Color: #3C464D</li> </ul> </li> <li>Remove meta data from svg</li> </ul>"},{"location":"github/","title":"github directory","text":"<p>This folder should contain the instructions for submitting issues and pull requests for this project</p>"},{"location":"github/contribute/","title":"Contribute: Make an Augmentation!","text":"<p>Spot an improvement opportunity? Feel free to contribute to our open-source design and documentation. </p>"},{"location":"github/contribute/#material-file-document-multiple-improve-our-documentation","title":":material-file-document-multiple:\u00a0Improve our Documentation","text":"<p>All of this documentation can be modified by you! Please help us make it better.</p> <ul> <li>These pages are contained in the <code>docs</code> folder of the SuperHeadphones repository.</li> </ul>"},{"location":"github/contribute/#submit-a-correction","title":"Submit a Correction","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your corrections or improvements to the markdown file.</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvements to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/contribute/#material-cog-improve-our-hardware-design","title":":material-cog:\u00a0Improve our Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SuperHeadphones repository.</li> </ul>"},{"location":"github/contribute/#submit-a-design-enhancement","title":"Submit a Design Enhancement","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"github/contribute/#contributors-clap","title":"Contributors\u00a0:clap:","text":"<p>Let's provide some recognition to the contributors for this project!</p> <p> </p>"},{"location":"github/file_issue/","title":"Did we make a mistake?","text":"<p>Spot something wrong? Please let us know. </p> <p>Need Help?</p> <p>If you need technical assistance or more information on a product that is not working as you expected, we recommend heading on over to the SparkFun Technical Assistance page for some initial troubleshooting. This Submit Issues page is not where users should seek assistance.</p> <p> SparkFun Technical Assistance Page </p> <p>If you can't find what you need there, the SparkFun Forums is a great place to search the product forums and ask questions.</p> <p>Account Registration Required</p> <p>For your first visit to our forum, you'll need to create a Forum Account to post questions.</p>"},{"location":"github/file_issue/#discrepancies-in-the-documentation","title":"Discrepancies in the Documentation","text":"<p>All of our documentation can be modified by you! Please help us make it better.</p> <ul> <li>The documentation files for these pages are contained in the <code>docs</code> folder of the SuperHeadphones repository.</li> </ul>"},{"location":"github/file_issue/#spot-something-wrong","title":"\ud83d\udd0d Spot something wrong?","text":"<p>If a section of the documentation is incorrect, please open an issue and let us know.</p>"},{"location":"github/file_issue/#do-you-have-a-suggested-correction","title":"Do you have a suggested correction?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your correction(s) or improvement(s) to the markdown file(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ul> <li>Once received, the documentation specialist will automatically be notified.</li> <li>We will review your suggested improvement(s) to make sure they are correct and fit within our documentation standards.</li> </ul> </li> </ol>"},{"location":"github/file_issue/#problems-in-the-hardware-design","title":"Problems in the Hardware Design","text":"<p>All of our designs are open-source! Please help us make it better.</p> <ul> <li>Our board design files are contained in the <code>Hardware</code> folder of the SuperHeadphones repository.</li> </ul>"},{"location":"github/file_issue/#does-something-not-make-sense","title":"Does something not make sense? \ud83e\udd14","text":"<p>If part of the design is confusing, please open an issue and let us know.</p>"},{"location":"github/file_issue/#did-we-forget-to-include-an-important-function-of-the-board","title":"Did we forget to include an important function of the board? \ud83e\udd26","text":"<p>If part of the board's functionality is missing, please open an issue and file a feature request.</p> <p>Design Considerations</p> <p>Please keep in mind that we may intentionally exclude certain functions of the board to meet our product design requirements.</p> <ul> <li>For example, our Qwiic Micro boards are intended to fit on a small board layout and only use I<sup>2</sup>C communication; therefore, we may not have the SPI and interrupt pins available for users.</li> </ul>"},{"location":"github/file_issue/#do-you-wish-to-contribute-directly-to-improving-the-board-design","title":"Do you wish to contribute directly to improving the board design?","text":"<ol> <li>With a GitHub account, fork this repository.</li> <li>Add your design augmentation(s)</li> <li>File a pull request with your changes, and enjoy making the words worlds world a better place.<ol> <li>Once received, the engineer in charge of the original design will automatically be notified.</li> <li>We will review your suggested improvement(s) to verify that they are within our board design standards and meet our product design requirements.</li> <li> <p>If approved, we will flag these changes for our next board revision. Congrats! \ud83c\udf7b</p> <p>Info</p> <p>Even if your suggestion is accepted, these changes may not be immediately available for purchase. We may have to cycle through our current product inventory first.</p> </li> </ol> </li> </ol>"},{"location":"javascript/","title":"javascript directory","text":"<p>This folder should contain the files for the custom javascript that is enabled in the product documentation</p>"},{"location":"stylesheet/REAMDE/","title":"Super Headphones","text":"<p>This github repository contains all the supporting files to host a tutorial that will guide you through how to build your own wireless and/or wired headphones with ambient microphones. We start with some off-the-shelf headphones  intended for use while lawn mowing, and then hack in some new electroncis to allow wireless (BT), auxilary 3.5mm TRS input, and stereo ambient microphones. The original  purpose of this project was to make it easy and safe to play loud music with a rock  band in the basement, however, the inclusion of the natural sounds around you into  your listening experiece can be useful in many other situations.</p> <p>Click here to view the tutorial.</p>"},{"location":"stylesheet/REAMDE/#repository-contents","title":"Repository Contents","text":"<ul> <li>/Documentation - Datasheets, additional product information</li> <li>/Hardware - Eagle design files (.brd, .sch)</li> <li>/docs - Documentation for the github pages version of this hookup guide</li> </ul>"},{"location":"stylesheet/REAMDE/#license-information","title":"License Information","text":"<p>This product is open source! </p> <p>Please review the LICENSE.md file for license information. </p> <p>If you have any questions or concerns on licensing, please contact technical support on our SparkFun forums.</p> <p>Distributed as-is; no warranty is given.</p> <ul> <li>Your friends at SparkFun.</li> </ul> <p>"}]}